//import { verifySignature } from "@anon-aadhaar/react";
import { verifySignature } from "@/lib/verifySignature";
import { NextApiRequest } from "next";
import { NextRequest, NextResponse } from "next/server";

export enum AadhaarQRValidation {
    QR_CODE_SCANNED = 'QR code scanned, verifying QR Code üîé',
    SIGNATURE_VERIFIED = 'Signature verified ‚úÖ',
    ERROR_PARSING_QR = 'QR code invalid ‚ùå',
  }
  
export type ModalViews = 'Verify' | 'Prove' | 'Proving'
  

export async function GET(req: NextRequest, res: NextResponse) {
  const { searchParams } = new URL(req.url);
  //const param = searchParams.get("code");
  const code = "27263339250802923756325359296583407532284820217018652584495546146476997714538833879127324501469878655150713714651964359516971769942438944430500569005849495344477588326964690886030469552492011841682232012031630398505453839696109346217495842734813631583932149664798675708715903656243709645057641675414654148279848747145418805199365660307263910509771139321233697351280402716020154318552483750886320347301984154850530310755727306951746710771756783310221415405691079592463292121144239908762195021473211329500033056462660717632454566750023561543825260662889756091154113204538758626107066788155364842542954575164149547782715516074122425841759260325547070817187024503394785786821097241849611321381387207493841878057379796249801806853659129485915008855389207815163614257385646179824039274860963516278019238534322885029075508389410465856530909766102772388789422022184571702697255105986561854797965315973818186618558748315379666622098427457119822829446436872043008948869129110353369115676486657087606283239575349995965342911815847986962524883003921297350063002720069089116357876636540577788639736720779499380387417365514628881628059668790215919336461995970211120692619779067627818864259946493733360180941833635787561533116648400973872285636463003627191922658807802337731179176973409288174129566058960966748065247719724685974658684203417236382903356386603637001100282331176287387276488108545208343965897300122345065167693882908343548908043410320812918808965390818938024262463871634137120428726095820906753790020944966082281539270400167642488309312941609583045881639000156134767698707780334685682374244061295153467244189799021551202916897082430390803616880053967882039532432029307031342919106646033641597731981596129294784634321164530707129918534985597267465028502079401032773102694192227667991568927500545512857721201221478201290108567385382774393384100196824747415357744849837606106988423892836459259174281240171712984196194477123878525472851523224680346900578425554708983383195614444657886542810341798053884329433536047089317800215379538486917770523036317179834071822201993707783136037105761327921351328253324686939396447698339410810578895141629854404510285372261124919207994430496906429142515324122186306304460180359550567658056461369245214938175821273761087055503759692571859080164721556120248096255980326619509082371382515302170002546109982377418957879749349731425294763737434497953061028283649809170660797340076300885626746540190064236553319821348010766233954265503298906301299722617733119616680350105271284883338268682923742386555080301436451513853544761777656590809866960057792938407864939102110328118555497078092695290861915841696772723675576897217521237648695245070973553696313733126666921434474057140069332763724021935635609804847645330482217261392109163472052838726544749788078083521439613735674904660331212418508347513868604789024617623233168759783360962044807591307043063747696154336636670955327134081716818761035156352658633481301389055404433477143829160799791636023598558738986171411514361207500576552927014452213287932150772470820238106088552758763908214624079908520222707312414872480368236294680331556236507069451005981642765822656512";
  let status;

  return NextResponse.json({ status });
}
